@page "/assets"

@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="row">
    <h3 class="mb-3">Assets</h3>

    <div class="row mb-3">
        <div class="col-12 col-md-3">
            <a href="/assets/add" class="btn btn-secondary">Add Asset</a>
        </div>
    </div>
    
    <SearchForm SearchAssets="SearchAssets" ResetFilter="ResetFilter" AssetFilter="@_assetFilter"/>
    
    <Categories SelectCategoryId="SelectCategory" SelectedCategory="_selectedCategoryId"/>

    <div class="col-4 d-flex gap-4 flex-wrap w-100">
        @if (_assetFilter != string.Empty)
        {
                @foreach (var asset in _filteredAssets)
                {
                    <AssetItem @key="asset.AssetId" Asset="asset"/>
                }
                
                @if (_filteredAssets.Count == 0)
                {
                    <div>Nothing found</div>
                }
        }
        else
        {
            @foreach (var asset in _categoryAssets)
            {
                <AssetItem @key="asset.AssetId" Asset="asset" DeleteAsset="@(() => DeleteAsset(asset.AssetId))"/>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string Url { get; set; } = "";

    private readonly List<Asset> _assets = AssetsRepository.GetAssets();

    private List<Asset> _filteredAssets = [];
    
    private List<Asset> _categoryAssets = [];

    private int _selectedCategoryId;

    private string _assetFilter = "";

    private void SelectCategory(int categoryId)
    {
        _categoryAssets = AssetsRepository.GetAssetsByCategory(categoryId);
        _selectedCategoryId = categoryId;
        _filteredAssets = [];
        _assetFilter = "";
    }

    private void SearchAssets(string searchText)
    {
        _assetFilter = searchText;
        _filteredAssets = _categoryAssets.Where(s => s.Name.Contains(_assetFilter, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ResetFilter()
    {
        _filteredAssets = [];
        _assetFilter = "";
    }

    private void DeleteAsset(int assetId)
    {
        if (assetId > 0)
        {
            AssetsRepository.DeleteAsset(assetId);
        }
    }
    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("categoryId", out var categoryId))
        {
            if (!string.IsNullOrEmpty(categoryId))
            {
                _selectedCategoryId = int.Parse(categoryId);
                _categoryAssets = AssetsRepository.GetAssetsByCategory(_selectedCategoryId);
    
                return;
            }
        }
            
        _categoryAssets = _assets;
    }

}